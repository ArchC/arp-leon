/******************************************************
 * Processor Module Implementation File.              *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#include  "leon3.H"
#include  "leon3_isa.cpp"

void leon3::behavior() {

  unsigned ins_id;
  if (has_delayed_load) {
    APP_MEM->load(delayed_load_program);
    ac_pc = ac_start_addr;
    has_delayed_load = false;
  }

  for (;;) {

    bhv_pc = ac_pc;

    if( start_up ){
      decode_pc = ac_pc;
      start_up=0;
    }
    else{ 
      decode_pc = bhv_pc;
    }
    
    MEM.write(0x90000000,(PSR.read() & 0x80) ? 0x9 : 0x8);
    //!Check if is a pending trap and execute the trap routine
    if(trap_selector.is_trap_mode()) {
       intp_hnd.execute_trap();
       decode_pc = ac_pc;
    }

    quant = 0;
    instr_dec = (ISA.decoder)->Decode(reinterpret_cast<unsigned char*>(buffer), quant);
    instr_vec = new ac_instr<leon3_parms::AC_DEC_FIELD_NUMBER>( instr_dec);
    ins_id = instr_vec->get(IDENT);

    if(trap_selector.is_trap_mode())
      ac_annul_sig = 1;

    if( ins_id == 0 && !ac_annul_sig) {
        cerr << "[ERROR] Unidentified instruction " << endl;
        cerr << "at " << hex << decode_pc << dec << endl;
        stop();
        return;
    }

    ac_pc = decode_pc;

    ISA.cur_instr_id = ins_id;
    if (!ac_annul_sig) ISA._behavior_instruction(instr_vec->get(1));
    switch (ins_id) {
    case 1: // Instruction call
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F1(instr_vec->get(1), instr_vec->get(2));
      if (!ac_annul_sig) ISA.behavior_call(instr_vec->get(1), instr_vec->get(2));
      break;
    case 2: // Instruction nop
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5));
      if (!ac_annul_sig) ISA.behavior_nop(instr_vec->get(1), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5));
      break;
    case 3: // Instruction sethi
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5));
      if (!ac_annul_sig) ISA.behavior_sethi(instr_vec->get(1), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5));
      break;
    case 4: // Instruction ba
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_ba(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 5: // Instruction bn
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bn(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 6: // Instruction bne
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bne(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 7: // Instruction be
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_be(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 8: // Instruction bg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bg(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 9: // Instruction ble
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_ble(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 10: // Instruction bge
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bge(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 11: // Instruction bl
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bl(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 12: // Instruction bgu
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bgu(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 13: // Instruction bleu
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bleu(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 14: // Instruction bcc
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bcc(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 15: // Instruction bcs
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bcs(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 16: // Instruction bpos
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bpos(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 17: // Instruction bneg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bneg(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 18: // Instruction bvc
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bvc(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 19: // Instruction bvs
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2B(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      if (!ac_annul_sig) ISA.behavior_bvs(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(4), instr_vec->get(8));
      break;
    case 20: // Instruction ldsb_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldsb_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 21: // Instruction ldsh_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldsh_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 22: // Instruction ldub_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldub_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 23: // Instruction lduh_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_lduh_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 24: // Instruction ld_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ld_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 25: // Instruction ldd_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldd_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 26: // Instruction lduba
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_lduba(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 27: // Instruction lduha
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_lduha(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 28: // Instruction lda
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_lda(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 29: // Instruction ldda
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldda(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 30: // Instruction stba
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_stba(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 31: // Instruction stha
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_stha(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 32: // Instruction sta
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sta(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 33: // Instruction stda
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_stda(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 34: // Instruction ldstuba
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldstuba(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 35: // Instruction ldsha
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldsha(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 36: // Instruction ldsba
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldsba(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 37: // Instruction swapa
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_swapa(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 38: // Instruction stb_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_stb_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 39: // Instruction sth_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sth_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 40: // Instruction st_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_st_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 41: // Instruction std_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_std_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 42: // Instruction ldstub_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldstub_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 43: // Instruction swap_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_swap_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 44: // Instruction sll_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sll_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 45: // Instruction srl_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_srl_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 46: // Instruction sra_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sra_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 47: // Instruction add_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_add_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 48: // Instruction addcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_addcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 49: // Instruction addx_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_addx_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 50: // Instruction addxcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_addxcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 51: // Instruction taddcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_taddcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 52: // Instruction taddcctv_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_taddcctv_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 53: // Instruction sub_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sub_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 54: // Instruction subcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_subcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 55: // Instruction subx_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_subx_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 56: // Instruction subxcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_subxcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 57: // Instruction tsubcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tsubcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 58: // Instruction tsubcctv_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tsubcctv_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 59: // Instruction and_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_and_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 60: // Instruction andcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_andcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 61: // Instruction andn_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_andn_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 62: // Instruction andncc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_andncc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 63: // Instruction or_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_or_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 64: // Instruction orcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_orcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 65: // Instruction orn_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_orn_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 66: // Instruction orncc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_orncc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 67: // Instruction xor_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_xor_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 68: // Instruction xorcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_xorcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 69: // Instruction xnor_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_xnor_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 70: // Instruction xnorcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_xnorcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 71: // Instruction save_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_save_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 72: // Instruction restore_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_restore_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 73: // Instruction umul_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_umul_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 74: // Instruction smul_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_smul_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 75: // Instruction umulcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_umulcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 76: // Instruction smulcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_smulcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 77: // Instruction mulscc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_mulscc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 78: // Instruction udiv_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_udiv_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 79: // Instruction udivcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_udivcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 80: // Instruction sdiv_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sdiv_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 81: // Instruction sdivcc_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_sdivcc_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 82: // Instruction jmpl_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_jmpl_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 83: // Instruction wry_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_wry_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 84: // Instruction wrtbr_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_wrtbr_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 85: // Instruction wrpsr_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_wrpsr_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 86: // Instruction wrwim_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_wrwim_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 87: // Instruction rett_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_rett_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 88: // Instruction flush_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_flush_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 89: // Instruction ldfsr_reg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ldfsr_reg(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 90: // Instruction ldsb_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ldsb_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 91: // Instruction ldsh_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ldsh_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 92: // Instruction ldub_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ldub_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 93: // Instruction lduh_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_lduh_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 94: // Instruction ld_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ld_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 95: // Instruction ldd_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ldd_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 96: // Instruction and_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_and_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 97: // Instruction andcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_andcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 98: // Instruction andn_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_andn_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 99: // Instruction andncc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_andncc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 100: // Instruction or_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_or_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 101: // Instruction orcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_orcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 102: // Instruction orn_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_orn_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 103: // Instruction orncc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_orncc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 104: // Instruction xor_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_xor_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 105: // Instruction xorcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_xorcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 106: // Instruction xnor_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_xnor_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 107: // Instruction flush_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_flush_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 108: // Instruction xnorcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_xnorcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 109: // Instruction umul_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_umul_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 110: // Instruction smul_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_smul_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 111: // Instruction umulcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_umulcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 112: // Instruction smulcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_smulcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 113: // Instruction mulscc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_mulscc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 114: // Instruction udiv_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_udiv_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 115: // Instruction udivcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_udivcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 116: // Instruction sdiv_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_sdiv_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 117: // Instruction sdivcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_sdivcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 118: // Instruction rdtbr
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_rdtbr(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 119: // Instruction wrtbr_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_wrtbr_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 120: // Instruction rdpsr
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_rdpsr(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 121: // Instruction wrpsr_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_wrpsr_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 122: // Instruction rdwim
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_rdwim(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 123: // Instruction wrwim_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_wrwim_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 124: // Instruction rett_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_rett_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 125: // Instruction ldfsr_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ldfsr_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 126: // Instruction stb_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_stb_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 127: // Instruction sth_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_sth_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 128: // Instruction st_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_st_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 129: // Instruction std_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_std_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 130: // Instruction ldstub_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_ldstub_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 131: // Instruction swap_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_swap_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 132: // Instruction sll_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_sll_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 133: // Instruction srl_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_srl_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 134: // Instruction sra_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_sra_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 135: // Instruction add_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_add_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 136: // Instruction addcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_addcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 137: // Instruction addx_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_addx_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 138: // Instruction addxcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_addxcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 139: // Instruction taddcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_taddcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 140: // Instruction taddcctv_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_taddcctv_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 141: // Instruction sub_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_sub_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 142: // Instruction subcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_subcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 143: // Instruction subx_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_subx_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 144: // Instruction subxcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_subxcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 145: // Instruction tsubcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_tsubcc_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 146: // Instruction tsubcctv_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_tsubcctv_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 147: // Instruction jmpl_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_jmpl_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 148: // Instruction save_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_save_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 149: // Instruction restore_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_restore_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 150: // Instruction rdy
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_rdy(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 151: // Instruction wry_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F3B(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      if (!ac_annul_sig) ISA.behavior_wry_imm(instr_vec->get(1), instr_vec->get(3), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(14));
      break;
    case 152: // Instruction unimplemented
      if (!ac_annul_sig) ISA._behavior_leon3_Type_F2A(instr_vec->get(1), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5));
      if (!ac_annul_sig) ISA.behavior_unimplemented(instr_vec->get(1), instr_vec->get(3), instr_vec->get(4), instr_vec->get(5));
      break;
    case 153: // Instruction ta
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_ta(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 154: // Instruction tn
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tn(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 155: // Instruction tne
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tne(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 156: // Instruction te
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_te(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 157: // Instruction tg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tg(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 158: // Instruction tle
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tle(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 159: // Instruction tge
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tge(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 160: // Instruction tl
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tl(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 161: // Instruction tgu
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tgu(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 162: // Instruction tleu
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tleu(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 163: // Instruction tcc
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tcc(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 164: // Instruction tcs
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tcs(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 165: // Instruction tpos
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tpos(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 166: // Instruction tneg
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tneg(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 167: // Instruction tvc
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tvc(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 168: // Instruction tvs
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTA(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      if (!ac_annul_sig) ISA.behavior_tvs(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(12), instr_vec->get(13));
      break;
    case 169: // Instruction ta_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_ta_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 170: // Instruction tn_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tn_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 171: // Instruction tne_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tne_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 172: // Instruction te_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_te_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 173: // Instruction tg_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tg_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 174: // Instruction tle_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tle_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 175: // Instruction tge_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tge_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 176: // Instruction tl_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tl_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 177: // Instruction tgu_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tgu_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 178: // Instruction tleu_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tleu_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 179: // Instruction tcc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tcc_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 180: // Instruction tcs_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tcs_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 181: // Instruction tpos_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tpos_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 182: // Instruction tneg_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tneg_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 183: // Instruction tvc_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tvc_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    case 184: // Instruction tvs_imm
      if (!ac_annul_sig) ISA._behavior_leon3_Type_FTB(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      if (!ac_annul_sig) ISA.behavior_tvs_imm(instr_vec->get(1), instr_vec->get(6), instr_vec->get(7), instr_vec->get(9), instr_vec->get(10), instr_vec->get(11), instr_vec->get(15), instr_vec->get(16));
      break;
    } // switch (ins_id)
    delete instr_vec;
    if ((!ac_wait_sig) && (!ac_annul_sig)) ac_instr_counter+=1;
    ac_annul_sig = 0;
    
    //!Updating Regs for behavioral simulation.
    if(!ac_wait_sig){
      bhv_pc = ac_pc;
    }
    if (ac_stop_flag) {
      return;
    }
    else {
      if (instr_in_batch < instr_batch_size) {
        instr_in_batch++;
      }
      else {
        instr_in_batch = 0;
        wait(1, SC_NS);
      }
    }

} // for (;;)
} // behavior()

 
#include <ac_sighandlers.H>

void leon3::init() {
  set_args(ac_argc, ac_argv);
#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();

  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
#ifndef AC_COMPSIM
  set_running();
#else
  void Execute(int argc, char *argv[]);
  Execute(argc, argv);
#endif
}

void leon3::init(int ac, char *av[]) {
  extern char* appfilename;
  ac_init_opt( ac, av);
  ac_init_app( ac, av);
  APP_MEM->load(appfilename);
  set_args(ac_argc, ac_argv);
#ifdef AC_VERIFY
  set_queue(av[0]);
#endif

  ac_pc = ac_start_addr;
  ISA._behavior_begin();
  cerr << "ArchC: -------------------- Starting Simulation --------------------" << endl;
  InitStat();

  signal(SIGINT, sigint_handler);
  signal(SIGTERM, sigint_handler);
  signal(SIGSEGV, sigsegv_handler);
  signal(SIGUSR1, sigusr1_handler);
#ifdef USE_GDB
  signal(SIGUSR2, sigusr2_handler);
#endif
#ifndef AC_COMPSIM
  set_running();
#else
  void Execute(int argc, char *argv[]);
  Execute(argc, argv);
#endif
}

//Stop simulation (may receive exit status)
void leon3::stop(int status) {
  cerr << "ArchC: -------------------- Simulation Finished --------------------" << endl;
  ISA._behavior_end();
  ac_stop_flag = 1;
  ac_exit_status = status;
#ifndef AC_COMPSIM
  set_stopped();
#endif
}

void leon3::load(char* program) {
  APP_MEM->load(program);
}

void leon3::delayed_load(char* program) {
  has_delayed_load = true;
  delayed_load_program = new char[strlen(program)];
  strcpy(delayed_load_program, program);
}

// Returns ac_pc value
unsigned leon3::get_ac_pc() {
  return ac_pc;
}

// Assigns value to ac_pc
void leon3::set_ac_pc(unsigned int value) {
  ac_pc = value;
}

// Wrapper function to PrintStat().
void leon3::PrintStat() {
  ac_arch<leon3_parms::ac_word, leon3_parms::ac_Hword>::PrintStat();
}

